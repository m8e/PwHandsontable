<?php

/**
* PwHandsontable Module v 1.0
* Integration of JQuery Plugin "Handsontable" in ProcessWire
*
* @author Stefan Wanzenried (Wanze)
* <http://www.everchanging.ch>
*
* ProcessWire 2.x
* Copyright (C) 2011 by Ryan Cramer
* Licensed under GNU/GPL v2, see LICENSE.TXT
*
* http://www.processwire.com
*
*/
class PwHandsontable extends WireData implements Module {

	const modeView = 1; // Display data as readOnly
	const modeEdit = 2; // Fields not readOnly are editable in the table
	const modeNew  = 3; // Empty table - insert data to create new Pages. First row = name of fields

	static $instance = 0;
	
	/**
	 * PageArray with pages to display in the table
	 */
	protected $foundPages;
	
	/**
	 * Unique ID for this instance
	 */
	protected $id;
	
	/**
	 * True if an ajax request is sent which matches this instance
	 */
	protected $isAjax = false;
	
	/**
	 * Default module config options
	 */
	protected static $defaultConfig = array(
		// Default columns to display in the table if no columns or template has been specified
		'columns' => array('id', 'title', 'name', 'path', 'template'),
		// Add width in px for each column, e.g. array(40,100,200...)
		'colWidths' => array(),
		// Javascript config passed to Handsontable
		'jsConfig' => array(
			'columnSorting' => true, 
			'manualColumnResize' => true,
			'currentRowClassName' => 'pwhot_currentRow',
			'currentColClassName' => 'pwhot_currentCol',
		),
		'limit' => 25,
		'selector' => '',
		'dateFormat' => 'Y-m-d',
		'mode' => self::modeEdit,
	);


	/**
	 * Supported Fieldtypes for fields that can be used as columns
	 * key = Fieldtype, renderer = Renderer in Handsontable, readOnly = true if field is not editable in table
	 * Note that Fieldtypes not defined here are not supported by the module and will be skipped
	 */
	protected static $supportedFieldtypes = array(
		'FieldtypePageTitle' => array('renderer' => 'text'),
		'FieldtypeText' => array('renderer' => 'text'),
		'FieldtypeTextarea' => array('renderer' => 'text'),
		'FieldtypeInteger' => array('renderer' => 'numeric'),
		'FieldtypeEmail' => array('renderer' => 'text'),
		'FieldtypeDatetime' => array('renderer' => 'date'),
		'FieldtypeURL' => array('renderer' => 'text'),
		'FieldtypeFloat' => array('renderer' => 'numeric'),
		'FieldtypeCheckbox' => array('renderer' => 'checkbox'),
		//'FieldtypePage' => array('renderer' => 'autocomplete'),
		'FieldtypePage' => array('renderer' => 'text', 'readOnly' => true),
		'FieldtypeFile' => array('renderer' => 'file', 'readOnly' => true),
		'FieldtypeImage' => array('renderer' => 'image', 'readOnly' => true),
	);

	/**
	 * Supported native fields (and a few fictive) to display in table
	 * Those fields are separated because we can't get them with wire('fields')->get()
	 */
	protected static $nativeFields = array(
		'id' => array('renderer' => 'numeric', 'readOnly' => true),
		'name' => array('renderer' => 'text'),
		'path' => array('renderer' => 'text', 'readOnly' => true),
		'template' => array('renderer' => 'text'),
		'parent' => array('renderer' => 'text'),
		'unpublished' => array('renderer' => 'checkbox'),
		'hidden' => array('renderer' => 'checkbox'),
		'published' => array('renderer' => 'checkbox'),
		'visible' => array('renderer' => 'checkbox'),
		'created' => array('renderer' => 'text', 'readOnly' => true),
		'modified' => array('renderer' => 'text', 'readOnly' => true),
	);


	public function __construct() {

		// Use WireDatas set()/get() for the module config
		$this->data = self::$defaultConfig;
		// Distinct instances if multiple PwHandsontable modules are executed on the same page
		self::$instance++;
		$this->id = 'pwhot_' . self::$instance;
		$this->setTrackChanges(true);

	}


	/**
	 * Tell ProcessWire something about this module
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'ProcessWire Handsontable',
			'summary' => 'CRUD functionality for ProcessWire pages/data with the Handsontable JQuery plugin',
			'version' => 100,
			'permanent' => false,
		);

	}


	/**
	 * Load Javascript and CSS
	 */
	public function init() {
		
		if (!$this->config->ajax) {
			$this->config->scripts->append($this->config->urls->PwHandsontable . 'handsontable/dist/jquery.handsontable.full.js');
			$this->config->scripts->append($this->config->urls->PwHandsontable . 'PwHandsontable.js');
			$this->config->styles->append($this->config->urls->PwHandsontable . 'handsontable/dist/jquery.handsontable.full.css');
			$this->config->styles->append($this->config->urls->PwHandsontable . 'PwHandsontable.css');
			$this->config->js('pwhot_url', $this->page->url);
		} else {
			if ($this->input->get->pwhot_id == $this->id) $this->isAjax = true;		
		}
				
	}


	/**
	 * Remove fields not supported when setting the columns
	 */
	public function set($key, $value) {

		if ($key == 'columns') {
			if (!is_array($value)) throw new WireException('You must set the columns as array');
			foreach ($value as $i => $field) {
				if (!$this->isSupportedField($field)) unset($value[$i]);
			}
		}

		if ($key == 'jsConfig') {
			if (!is_array($value)) throw new WireException('jsConfig must be an array');
			$value = array_merge($this->jsConfig, $value);
		}

		return parent::set($key, $value);

	}


	/**
	 * Renders the table or handles actions sent with ajax
	 */
	public function render() {
				
		if (!$this->selector) throw new WireException('You must provide a selector string');
		
		if ($this->isAjax) {
			switch ($this->input->get->action) {
				case 'save' :
					$this->editPages();
					break;
				case 'new' :
					$this->createPages();
					break;
			}
		} 
		
		// No actions to perform, render HTML + JS for this instance
		return $this->_render();
				
	}
	
	/**
	 *
	 *
	 */
	protected function _render() {
		
		$config = rtrim($this->buildJsConfig(), '}');		
		$out = "<div id='{$this->id}' class='pwhot_table'></div>
		        <script>
		        
		        PwHOT.url = '{$this->page->url}';
		        PwHOT.changedData.{$this->id} = [];
		        
		        $('#{$this->id}').handsontable(
		          $config,
		          afterChange : function(changes, source) {
		            if (!changes) return;
		            var data = {
		              'id' : $('#{$this->id}').handsontable('getInstance').getData()[changes[0][0]]['id'],
		              'field' : changes[0][1],
		              'value' : changes[0][3],
		            };
		            PwHOT.changedData.{$this->id}.push(data);
		            console.log(PwHOT);
		            $('.pwhot_save').removeClass('ui-state-disabled');
		          }
		        });
		        </script>";
		
		// Paging
		$out .= $this->foundPages->renderPager(array(
			'listMarkup' => "<ul class='MarkupPagerNav' data-id='{$this->id}'>{out}</ul>",
		));
		
		// Display Save button in edit mode
		if ($this->mode == self::modeEdit) {
			$button = $this->modules->get('InputfieldButton');
			$button->attr('value', $this->_('Save Changes'));
			$button->attr('class', 'pwhot_save ui-button ui-widget ui-corner-all ui-state-default ui-state-disabled');
			$button->attr('data-id', $this->id);
			$out .= $button->render();
		}
				
		return $out;			
		
	}
	
	/**
	 * Build the Javascript config options for Handsontable
	 * @return JSON
	 */
	protected function buildJsConfig() {

		$config = array();
		$config['columns'] = $this->getFormattedColumns();
		$config['data'] = $this->getFormattedData();

		// Use field label for column headers
		$colHeaders = array();
		foreach ($this->columns as $col) {
			$field = $this->fields->get($col);
			$colHeaders[] = (!is_null($field) && $field->label) ? $field->label : $col;
		}
		$config['colHeaders'] = $colHeaders;

		if (count($this->colWidths)) $config['colWidths'] = $this->colWidths;

		// Append custom handsontable configs
		foreach ($this->jsConfig as $k => $v) $config[$k] = $v;
				
		//echo '<pre>' . json_encode($config) . '</pre>';
		return json_encode($config);

	}

	/**
	 * Returns the columns to display in the table with the correct renderer/options for Handsontable
	 * @return array
	 */
	protected function getFormattedColumns() {

		// If we display data from one template, we'll use compatible fields of the template as columns
		// But only if the developer did not specify columns explicitly with ->columns = array('col1', 'col2')
		$columns = $this->columns;
		$hasTemplate = preg_match('/template=([\w-]+)/i', $this->selector, $template);
		if ($hasTemplate && !$this->isChanged('columns')) {
			$columns = array();
			$fields = $this->templates->get($template[1])->fields;
			foreach ($fields as $field) {
				if ($this->isSupportedField($field) && !in_array($field, $columns)) {
					$columns[] = (string) $field;
				}
			}
		}

		$this->columns = $columns;

		// Setup columns configs
		$out = array();
		foreach ($columns as $i => $col) {
			$renderer = $this->getRenderer($col);
			$colConfig = array('data' => $col, 'type' => $renderer);
			if ($this->mode == self::modeView || $this->isReadonlyField($col)) $colConfig['readOnly'] = true;
			$out[] = $colConfig;
		}
		return $out;

	}

	/**
	 * Returns the data for handsontable (rows)
	 * @return array
	 */
	protected function getFormattedData() {

		$selector = $this->buildSelector();
		$data = array();
		$this->foundPages = $this->pages->find($selector);
		foreach ($this->foundPages as $page) {
			if (!$page->viewable()) continue;
			$page->of(true);
			$row = array();
			// First column must be the page id -> this column is set to hidden in handsontable
			// Used to reference a page when sending back data
			$row['id'] = $page->id;
			foreach ($this->columns as $col) {
				$row[$col] = $this->getCellValue($page, $col);
			}
			$data[] = $row;
		}

		return $data;
	}

	
	/**
	 * Build the selector to search the pages
	 * @return Selector string
	 */
	protected function buildSelector() {
		
		$selector  = $this->selector;
		// Exclude admin pages
		$selector .= ",has_parent!={$this->config->adminRootPageID}";
		// Make really sure we limit the amount of pages
		if (strpos($selector, 'limit') === false) $selector .= ",limit={$this->limit}";
		
		return $selector;
		
	}

	/**
	 * Return the handsontable renderer for the given field
	 * @param string $fieldName Name of field
	 * @return string|array based on the renderer
	 */
	protected function getRenderer($fieldName) {

		$renderer = array();
		if ($this->isNativeField($fieldName)) {
			$_renderer = self::$nativeFields[$fieldName]['renderer'];
		} else {
			$field =  $this->fields->get($fieldName);
			$fieldType = (string) $field->type;
			$_renderer = self::$supportedFieldtypes[$fieldType]['renderer'];
			// TODO: Other renderer like autocomplete or custom renderer need more setup here...
		}
		$renderer['renderer'] = $_renderer;
		return $renderer;
	}

	/**
	 * Checks of a given field is setup as readOnly
	 */
	protected function isReadonlyField($fieldName) {

		if ($this->isNativeField($fieldName)) {
			$fieldArray = self::$nativeFields[$fieldName];
			return (isset(self::$nativeFields[$fieldName]['readOnly']));
		} else {
			$type = (string) $this->fields->get($fieldName)->type;
			return (isset(self::$supportedFieldtypes[$type]['readOnly']));
		}
	}


	/**
	 * Checks if a field is supported by this module
	 */
	protected function isSupportedField($fieldName) {

		if ($this->isNativeField($fieldName)) return true;

		$field = $this->fields->get($fieldName);
		if ($field == null) return false;
		$fieldType = (string) $field->type;
		/*
		// Page fields are only supported if they hold a single value
		if ($fieldType == 'FieldtypePage') {
			$inputfield = $field->inputfield;
			$module = $this->modules->get($inputfield);
			return !($module instanceof InputfieldHasArrayValue);
		}
		*/
		return (in_array($fieldType, array_keys(self::$supportedFieldtypes)));

	}

	/**
	 * Get the value to display in a cell
	 * @param Page $page The page to get the value from
	 * @param String $col Field name
	 */
	protected function getCellValue($page, $col) {

		$value = '';
		if ($this->isNativeField($col)) {
			switch ($col) {
			case 'unpublished':
				$value = $page->is(Page::statusUnpublished);
				break;
			case 'hidden':
				$value = $page->is(Page::statusHidden);
				break;
			case 'published':
				$value = !$page->is(Page::statusUnpublished);
				break;
			case 'visible':
				$value = !$page->is(Page::statusHidden);
				break;
			case 'created':
			case 'modified':
				$value = date($this->dateFormat, $page->get($col));
				break;
			default:
				$value = (string) $page->get($col);
			}
		} else {
			$field = $page->get($col);
			if ($field instanceof Page) {
				$value = $field->title;
			} else if ($field instanceof PageArray) {
					foreach ($field as $p) $value .= $p->title . "\n";
				} else if ($field instanceof Pagefile) {
					$value = $field->url;
				} else if ($field instanceof Pagefiles && count($field)) {
					$value = array();
					foreach ($field as $f) $value[] = $f->url;
				} else {
					$value = (string) $field;
			}
		}

		return $value;
	}


	protected function isNativeField($fieldName) {
		return in_array($fieldName, array_keys(self::$nativeFields));
	}
	
	/**
	 * Called if there was a request to save the modified fields
	 * @return JSON
	 */
	protected function editPages() {
				
		if (!$this->input->get->data) return;		
				
		$out = array();
		
		// Store changed data in optimized array for saving the pages afterwards
		$mods = array();
		$data = json_decode($this->input->get->data, true);
		foreach ($data as $k => $v) {
			if (!isset($mods[$v['id']])) $mods[$v['id']] = array();
			$mods[$v['id']][] = array('field' => $v['field'], 'value' => $v['value']);
		}
		
		//print_r($mods); die();
				
		$saved = 0;
		
		// Save changes
		foreach ($mods as $id => $changes) {
			$page = $this->pages->get($id);
			if (!$page->editable()) continue;
			$page->of(false);
			foreach ($changes as $c) {
				switch($c['field']) {
					case 'unpublished':
						if ($c['value'] == 1) { 
							$page->addStatus(Page::statusUnpublished);
						} else {
							$page->removeStatus(Page::statusUnpublished);	
						} 
						break;
					case 'hidden':
						if ($c['value'] == 1) { 
							$page->addStatus(Page::statusHidden);
						} else {
							$page->removeStatus(Page::statusHidden);	
						} 
						break;
					default:
						$page->set($c['field'], $c['value']);
						break;
				}
			}
			$page->save();
			$saved++;
		}
		
		echo 'Saved ' + $saved + 'pages';
		exit;
		
	}

}
